// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cppdist
Rcpp::NumericVector cppdist(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<double> lat, std::vector<double> lon, double k, std::vector<int> dep, std::vector<int> arr, int algo);
RcppExport SEXP _cppRouting_cppdist(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppdist(gfrom, gto, gw, nb, lat, lon, k, dep, arr, algo));
    return rcpp_result_gen;
END_RCPP
}
// cpppath
Rcpp::List cpppath(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<double> lat, std::vector<double> lon, double k, std::vector<std::string> dict, std::vector<int> keep, std::vector<int> dep, std::vector<int> arr, double lim, int algo);
RcppExport SEXP _cppRouting_cpppath(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP, SEXP dictSEXP, SEXP keepSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP limSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< double >::type lim(limSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppath(gfrom, gto, gw, nb, lat, lon, k, dict, keep, dep, arr, lim, algo));
    return rcpp_result_gen;
END_RCPP
}
// cppdistmat
Rcpp::NumericMatrix cppdistmat(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int> dep, std::vector<int> arr);
RcppExport SEXP _cppRouting_cppdistmat(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP depSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(cppdistmat(gfrom, gto, gw, nb, dep, arr));
    return rcpp_result_gen;
END_RCPP
}
// cpppathmat
Rcpp::List cpppathmat(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<std::string> dict, std::vector<int> keep, std::vector<int> dep, std::vector<int> arr, std::vector<double> lim, bool setdif, int algo, bool reverse);
RcppExport SEXP _cppRouting_cpppathmat(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP dictSEXP, SEXP keepSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP limSEXP, SEXP setdifSEXP, SEXP algoSEXP, SEXP reverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lim(limSEXP);
    Rcpp::traits::input_parameter< bool >::type setdif(setdifSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< bool >::type reverse(reverseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppathmat(gfrom, gto, gw, nb, dict, keep, dep, arr, lim, setdif, algo, reverse));
    return rcpp_result_gen;
END_RCPP
}
// cppsimplify
Rcpp::List cppsimplify(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int> keep, bool rm_loop, bool iterate, bool progress);
RcppExport SEXP _cppRouting_cppsimplify(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP keepSEXP, SEXP rm_loopSEXP, SEXP iterateSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< bool >::type rm_loop(rm_loopSEXP);
    Rcpp::traits::input_parameter< bool >::type iterate(iterateSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(cppsimplify(gfrom, gto, gw, nb, keep, rm_loop, iterate, progress));
    return rcpp_result_gen;
END_RCPP
}
// cppcontract
Rcpp::List cppcontract(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int NbNodes, bool display_progress);
RcppExport SEXP _cppRouting_cppcontract(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP NbNodesSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type NbNodes(NbNodesSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(cppcontract(gfrom, gto, gw, NbNodes, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// cppdistC
Rcpp::NumericVector cppdistC(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int>& rank, std::vector<int>& shortf, std::vector<int>& shortt, std::vector<int>& shortc, bool phast, std::vector<int> dep, std::vector<int> arr, int algo);
RcppExport SEXP _cppRouting_cppdistC(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP rankSEXP, SEXP shortfSEXP, SEXP shorttSEXP, SEXP shortcSEXP, SEXP phastSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortf(shortfSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortt(shorttSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortc(shortcSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppdistC(gfrom, gto, gw, nb, rank, shortf, shortt, shortc, phast, dep, arr, algo));
    return rcpp_result_gen;
END_RCPP
}
// cpppathC
Rcpp::List cpppathC(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int>& rank, std::vector<int>& shortf, std::vector<int>& shortt, std::vector<int>& shortc, bool phast, std::vector<std::string> dict, std::vector<int> keep, std::vector<int> dep, std::vector<int> arr, int algo);
RcppExport SEXP _cppRouting_cpppathC(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP rankSEXP, SEXP shortfSEXP, SEXP shorttSEXP, SEXP shortcSEXP, SEXP phastSEXP, SEXP dictSEXP, SEXP keepSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortf(shortfSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortt(shorttSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortc(shortcSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppathC(gfrom, gto, gw, nb, rank, shortf, shortt, shortc, phast, dict, keep, dep, arr, algo));
    return rcpp_result_gen;
END_RCPP
}
// cppdistmatC
Rcpp::NumericMatrix cppdistmatC(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int>& rank, std::vector<int>& shortf, std::vector<int>& shortt, std::vector<int>& shortc, bool phast, std::vector<int> dep, std::vector<int> arr, int algo);
RcppExport SEXP _cppRouting_cppdistmatC(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP rankSEXP, SEXP shortfSEXP, SEXP shorttSEXP, SEXP shortcSEXP, SEXP phastSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortf(shortfSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortt(shorttSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortc(shortcSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppdistmatC(gfrom, gto, gw, nb, rank, shortf, shortt, shortc, phast, dep, arr, algo));
    return rcpp_result_gen;
END_RCPP
}
// cpppathmatC
Rcpp::List cpppathmatC(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int>& rank, std::vector<int>& shortf, std::vector<int>& shortt, std::vector<int>& shortc, bool phast, std::vector<std::string> dict, std::vector<int> keep, std::vector<int> dep, std::vector<int> arr);
RcppExport SEXP _cppRouting_cpppathmatC(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP rankSEXP, SEXP shortfSEXP, SEXP shorttSEXP, SEXP shortcSEXP, SEXP phastSEXP, SEXP dictSEXP, SEXP keepSEXP, SEXP depSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortf(shortfSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortt(shorttSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortc(shortcSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dict(dictSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppathmatC(gfrom, gto, gw, nb, rank, shortf, shortt, shortc, phast, dict, keep, dep, arr));
    return rcpp_result_gen;
END_RCPP
}
// cpppadd
Rcpp::NumericMatrix cpppadd(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, std::vector<double>& gadd, int nb, std::vector<int> dep, std::vector<int> arr);
RcppExport SEXP _cppRouting_cpppadd(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP gaddSEXP, SEXP nbSEXP, SEXP depSEXP, SEXP arrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gadd(gaddSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppadd(gfrom, gto, gw, gadd, nb, dep, arr));
    return rcpp_result_gen;
END_RCPP
}
// cppdistadd
Rcpp::NumericVector cppdistadd(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, std::vector<double>& gadd, int nb, std::vector<double> lat, std::vector<double> lon, double k, std::vector<int> dep, std::vector<int> arr, int algo);
RcppExport SEXP _cppRouting_cppdistadd(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP gaddSEXP, SEXP nbSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gadd(gaddSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppdistadd(gfrom, gto, gw, gadd, nb, lat, lon, k, dep, arr, algo));
    return rcpp_result_gen;
END_RCPP
}
// cppdistaddC
Rcpp::NumericVector cppdistaddC(std::vector<int>& orfrom, std::vector<int>& orto, std::vector<double>& orw, std::vector<double>& gadd, std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int>& rank, std::vector<int>& shortf, std::vector<int>& shortt, std::vector<int>& shortc, bool phast, std::vector<int> dep, std::vector<int> arr, int algo);
RcppExport SEXP _cppRouting_cppdistaddC(SEXP orfromSEXP, SEXP ortoSEXP, SEXP orwSEXP, SEXP gaddSEXP, SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP rankSEXP, SEXP shortfSEXP, SEXP shorttSEXP, SEXP shortcSEXP, SEXP phastSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type orfrom(orfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type orto(ortoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type orw(orwSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gadd(gaddSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortf(shortfSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortt(shorttSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortc(shortcSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppdistaddC(orfrom, orto, orw, gadd, gfrom, gto, gw, nb, rank, shortf, shortt, shortc, phast, dep, arr, algo));
    return rcpp_result_gen;
END_RCPP
}
// cppaddC
Rcpp::NumericMatrix cppaddC(std::vector<int>& orfrom, std::vector<int>& orto, std::vector<double>& orw, std::vector<double>& gadd, std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int>& rank, std::vector<int>& shortf, std::vector<int>& shortt, std::vector<int>& shortc, bool phast, std::vector<int> dep, std::vector<int> arr, int algo);
RcppExport SEXP _cppRouting_cppaddC(SEXP orfromSEXP, SEXP ortoSEXP, SEXP orwSEXP, SEXP gaddSEXP, SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP rankSEXP, SEXP shortfSEXP, SEXP shorttSEXP, SEXP shortcSEXP, SEXP phastSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type orfrom(orfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type orto(ortoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type orw(orwSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gadd(gaddSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortf(shortfSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortt(shorttSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortc(shortcSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppaddC(orfrom, orto, orw, gadd, gfrom, gto, gw, nb, rank, shortf, shortt, shortc, phast, dep, arr, algo));
    return rcpp_result_gen;
END_RCPP
}
// cppaon
Rcpp::List cppaon(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<double> lat, std::vector<double> lon, double k, std::vector<int> dep, std::vector<int> arr, std::vector<double> dem, int algo);
RcppExport SEXP _cppRouting_cppaon(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP demSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dem(demSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppaon(gfrom, gto, gw, nb, lat, lon, k, dep, arr, dem, algo));
    return rcpp_result_gen;
END_RCPP
}
// cppaonC
Rcpp::List cppaonC(std::vector<int>& orfrom, std::vector<int>& orto, std::vector<double>& orw, std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, int nb, std::vector<int>& rank, std::vector<int>& shortf, std::vector<int>& shortt, std::vector<int>& shortc, bool phast, std::vector<int> dep, std::vector<int> arr, std::vector<double> dem, int algo);
RcppExport SEXP _cppRouting_cppaonC(SEXP orfromSEXP, SEXP ortoSEXP, SEXP orwSEXP, SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP nbSEXP, SEXP rankSEXP, SEXP shortfSEXP, SEXP shorttSEXP, SEXP shortcSEXP, SEXP phastSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP demSEXP, SEXP algoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type orfrom(orfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type orto(ortoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type orw(orwSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortf(shortfSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortt(shorttSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type shortc(shortcSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dem(demSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    rcpp_result_gen = Rcpp::wrap(cppaonC(orfrom, orto, orw, gfrom, gto, gw, nb, rank, shortf, shortt, shortc, phast, dep, arr, dem, algo));
    return rcpp_result_gen;
END_RCPP
}
// cpptraffic
Rcpp::List cpptraffic(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, std::vector<double>& gflow, std::vector<double>& gaux, std::vector<double>& gftt, std::vector<double>& galpha, std::vector<double>& gbeta, std::vector<double>& gcap, int nb, std::vector<double> lat, std::vector<double> lon, double k, std::vector<int> dep, std::vector<int> arr, std::vector<double> dem, double max_gap, int max_it, int method, int aon_method, bool contract, bool phast, bool verbose);
RcppExport SEXP _cppRouting_cpptraffic(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP gflowSEXP, SEXP gauxSEXP, SEXP gfttSEXP, SEXP galphaSEXP, SEXP gbetaSEXP, SEXP gcapSEXP, SEXP nbSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP demSEXP, SEXP max_gapSEXP, SEXP max_itSEXP, SEXP methodSEXP, SEXP aon_methodSEXP, SEXP contractSEXP, SEXP phastSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gflow(gflowSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gaux(gauxSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gftt(gfttSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type galpha(galphaSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gbeta(gbetaSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gcap(gcapSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dem(demSEXP);
    Rcpp::traits::input_parameter< double >::type max_gap(max_gapSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type aon_method(aon_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type contract(contractSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpptraffic(gfrom, gto, gw, gflow, gaux, gftt, galpha, gbeta, gcap, nb, lat, lon, k, dep, arr, dem, max_gap, max_it, method, aon_method, contract, phast, verbose));
    return rcpp_result_gen;
END_RCPP
}
// cppalgB
Rcpp::List cppalgB(std::vector<int>& gfrom, std::vector<int>& gto, std::vector<double>& gw, std::vector<double>& gflow, std::vector<double>& gaux, std::vector<double>& gftt, std::vector<double>& galpha, std::vector<double>& gbeta, std::vector<double>& gcap, int nb, std::vector<double> lat, std::vector<double> lon, double k, std::vector<int> dep, std::vector<int> arr, std::vector<double> dem, double max_gap, int max_it, int aon_method, int batch_size, int n_batch, std::string file_path, int inner_iter, double NUM_TOL, bool contract, bool phast, bool verbose);
RcppExport SEXP _cppRouting_cppalgB(SEXP gfromSEXP, SEXP gtoSEXP, SEXP gwSEXP, SEXP gflowSEXP, SEXP gauxSEXP, SEXP gfttSEXP, SEXP galphaSEXP, SEXP gbetaSEXP, SEXP gcapSEXP, SEXP nbSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP kSEXP, SEXP depSEXP, SEXP arrSEXP, SEXP demSEXP, SEXP max_gapSEXP, SEXP max_itSEXP, SEXP aon_methodSEXP, SEXP batch_sizeSEXP, SEXP n_batchSEXP, SEXP file_pathSEXP, SEXP inner_iterSEXP, SEXP NUM_TOLSEXP, SEXP contractSEXP, SEXP phastSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type gfrom(gfromSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type gto(gtoSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gw(gwSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gflow(gflowSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gaux(gauxSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gftt(gfttSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type galpha(galphaSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gbeta(gbetaSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type gcap(gcapSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lat(latSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dem(demSEXP);
    Rcpp::traits::input_parameter< double >::type max_gap(max_gapSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type aon_method(aon_methodSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_batch(n_batchSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    Rcpp::traits::input_parameter< int >::type inner_iter(inner_iterSEXP);
    Rcpp::traits::input_parameter< double >::type NUM_TOL(NUM_TOLSEXP);
    Rcpp::traits::input_parameter< bool >::type contract(contractSEXP);
    Rcpp::traits::input_parameter< bool >::type phast(phastSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cppalgB(gfrom, gto, gw, gflow, gaux, gftt, galpha, gbeta, gcap, nb, lat, lon, k, dep, arr, dem, max_gap, max_it, aon_method, batch_size, n_batch, file_path, inner_iter, NUM_TOL, contract, phast, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cppRouting_cppdist", (DL_FUNC) &_cppRouting_cppdist, 10},
    {"_cppRouting_cpppath", (DL_FUNC) &_cppRouting_cpppath, 13},
    {"_cppRouting_cppdistmat", (DL_FUNC) &_cppRouting_cppdistmat, 6},
    {"_cppRouting_cpppathmat", (DL_FUNC) &_cppRouting_cpppathmat, 12},
    {"_cppRouting_cppsimplify", (DL_FUNC) &_cppRouting_cppsimplify, 8},
    {"_cppRouting_cppcontract", (DL_FUNC) &_cppRouting_cppcontract, 5},
    {"_cppRouting_cppdistC", (DL_FUNC) &_cppRouting_cppdistC, 12},
    {"_cppRouting_cpppathC", (DL_FUNC) &_cppRouting_cpppathC, 14},
    {"_cppRouting_cppdistmatC", (DL_FUNC) &_cppRouting_cppdistmatC, 12},
    {"_cppRouting_cpppathmatC", (DL_FUNC) &_cppRouting_cpppathmatC, 13},
    {"_cppRouting_cpppadd", (DL_FUNC) &_cppRouting_cpppadd, 7},
    {"_cppRouting_cppdistadd", (DL_FUNC) &_cppRouting_cppdistadd, 11},
    {"_cppRouting_cppdistaddC", (DL_FUNC) &_cppRouting_cppdistaddC, 16},
    {"_cppRouting_cppaddC", (DL_FUNC) &_cppRouting_cppaddC, 16},
    {"_cppRouting_cppaon", (DL_FUNC) &_cppRouting_cppaon, 11},
    {"_cppRouting_cppaonC", (DL_FUNC) &_cppRouting_cppaonC, 16},
    {"_cppRouting_cpptraffic", (DL_FUNC) &_cppRouting_cpptraffic, 23},
    {"_cppRouting_cppalgB", (DL_FUNC) &_cppRouting_cppalgB, 27},
    {NULL, NULL, 0}
};

RcppExport void R_init_cppRouting(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
